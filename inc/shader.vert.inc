const char *shader_vert_src =
"#version 460\n"
"\n"
"layout(location = 0) in vec3 in_pos;\n"
"layout(location = 1) in vec4 in_color;\n"
"layout(location = 2) in vec3 in_normal;\n"
"\n"
"out vec4 v_color;\n"
"\n"
"uniform mat4 u_world;\n"
"uniform mat4 u_normal;\n"
"uniform mat4 u_view;\n"
"uniform mat4 u_proj;\n"
"uniform vec3 u_eyePos;\n"
"\n"
"uniform vec4 u_matColorSelector;\n"
"uniform vec4 u_matAmbient;\n"
"uniform vec4 u_matDiffuse;\n"
"uniform vec4 u_matSpecular;\n"
"uniform vec4 u_matEmissive;\n"
"uniform float u_matShininess;\n"
"\n"
"uniform vec4 u_ambient;\n"
"\n"
"// one hardcoded directional light\n"
"uniform vec4 u_lightDiffuse;\n"
"uniform vec4 u_lightSpecular;\n"
"uniform vec3 u_lightDirection;\n"
"\n"
"/*\n"
"material:\n"
"	ambient color\n"
"	diffuse color\n"
"	specular color\n"
"	emissive color\n"
"	specular power\n"
"\n"
"light:\n"
"	ambient intensity\n"
"	diffuse intensity\n"
"	specular intensity\n"
"	position\n"
"	direction\n"
"	...\n"
"\n"
"	global ambient\n"
"\n"
"	emissive +\n"
"	global ambient * ambient color +\n"
"	sum	ambient intensity * ambient color +\n"
"		diffuse intensity * diffuse color * diffuse factor +\n"
"		specular intensity * specular color * (specular factor)^specular power +\n"
"\n"
"	alpha = diffuse color alpha\n"
"\n"
"color material\n"
"	each material color can be per vertex\n"
"*/\n"
"\n"
"void main()\n"
"{\n"
"	vec3 Vw = vec3(u_world * vec4(in_pos, 1.0));\n"
"	vec3 Nw = mat3(u_normal) * in_normal;\n"
"	vec3 Vv = vec3(u_view * vec4(Vw, 1.0));\n"
"	gl_Position = u_proj * vec4(Vv, 1.0);\n"
"\n"
"	vec4 amb = mix(u_matAmbient, in_color, u_matColorSelector.x);\n"
"	vec4 diff = mix(u_matDiffuse, in_color, u_matColorSelector.y);\n"
"	vec4 spec = mix(u_matSpecular, in_color, u_matColorSelector.z);\n"
"	vec4 emiss = mix(u_matEmissive, in_color, u_matColorSelector.w);\n"
"\n"
"	v_color = emiss + u_ambient*amb;\n"
"\n"
"	float dl = max(0, dot(-u_lightDirection, Nw));\n"
"	v_color += u_lightDiffuse*diff*dl;\n"
"	v_color.a = diff.a;\n"
"\n"
"	if(u_matShininess != 0.0 && dl != 0.0) {\n"
"		vec3 toLight = -u_lightDirection;\n"
"		vec3 toEye = normalize(u_eyePos - Vw);\n"
"/*\n"
"		// blinn\n"
"		vec3 h = normalize(toLight + toEye);\n"
"		float sl = pow(max(0, dot(h, Nw)), u_matShininess);\n"
"*/\n"
"		// phong\n"
"		vec3 r = 2*dot(Nw, toLight)*Nw - toLight;\n"
"		float sl = pow(max(0, dot(r, toEye)), u_matShininess);\n"
"\n"
"		v_color.rgb += vec3(u_lightSpecular*spec*sl);\n"
"	}\n"
"}\n"
;
